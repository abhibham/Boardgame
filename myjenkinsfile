pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven'
    }

    environment{
        SCANNER_HOME= tool 'sonar-scanner'
    }    
   
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/abhibham/Boardgame.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        
        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName-BoardGame -Dsonar.projectKey-BoardGame \
                    -Dsonar.java.binaries=. '''
                }    
            }         
        }            
        
        stage('Quality Gate') {
            steps {            
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }    
            }         
        }            
        
        stage('Build') {
            steps {
                sh "mvn package"          
            }    
        }            
        
        stage('Build & Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t abhishekbhamare/BoardGame:latest ."
                    }
                }    
            }      
        }            
    
        stage('Docker Image scan') {
            steps {
                sh "trivy image --format table -o trivy-fs-report.html abhishekbhamare/BoardGame:latest ."        
            }        
        }            
        
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push -t abhishekbhamare/BoardGame:latest"
                    }         
                }    
            }        
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.49.2:8443') {   
                 sh "kubectl apply -f deployment-service.yaml"
                }
            }    
        }  
    
        stage('Verify the Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.49.2:8443') {   
                  sh "kubectl apply -f deployment-service.yaml"
                  sh "kubectl get pods -n webapps"
                  sh "kubectl get svc -n webapps"
                }
            }    
        }  
    }
}
